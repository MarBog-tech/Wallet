// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Wallet.DAL;

#nullable disable

namespace Wallet.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230124040557_3")]
    partial class _3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.1");

            modelBuilder.Entity("Wallet.Domain.Entity.Expenses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Description")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Time")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserCardId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserCardId");

                    b.ToTable("Expenses", (string)null);
                });

            modelBuilder.Entity("Wallet.Domain.Entity.Profit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Description")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Time")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserCardId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserCardId");

                    b.ToTable("Profits", (string)null);
                });

            modelBuilder.Entity("Wallet.Domain.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EmailLogin")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EmailLogin = "marchuk_bogdan@i.ua",
                            FirstName = "Bogdan",
                            LastName = "Marchuk",
                            Password = "ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f"
                        });
                });

            modelBuilder.Entity("Wallet.Domain.Entity.UserCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Balance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserCards", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Balance = 15000m,
                            Description = "My main card",
                            Number = 0,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Wallet.Domain.Entity.Expenses", b =>
                {
                    b.HasOne("Wallet.Domain.Entity.UserCard", "UserCard")
                        .WithMany("Expenses")
                        .HasForeignKey("UserCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCard");
                });

            modelBuilder.Entity("Wallet.Domain.Entity.Profit", b =>
                {
                    b.HasOne("Wallet.Domain.Entity.UserCard", "UserCard")
                        .WithMany("Profits")
                        .HasForeignKey("UserCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCard");
                });

            modelBuilder.Entity("Wallet.Domain.Entity.UserCard", b =>
                {
                    b.HasOne("Wallet.Domain.Entity.User", "User")
                        .WithMany("UserCards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wallet.Domain.Entity.User", b =>
                {
                    b.Navigation("UserCards");
                });

            modelBuilder.Entity("Wallet.Domain.Entity.UserCard", b =>
                {
                    b.Navigation("Expenses");

                    b.Navigation("Profits");
                });
#pragma warning restore 612, 618
        }
    }
}
